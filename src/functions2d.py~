### Generate a seed triangulation

def surface(g,n):
    "This function produces a triangulation of the closed orientable surface of genus `g` with `n` triangles."
    if n%2 != 0:
        print("number of triangles must be even")
        return None
    if n < 4*g-2:
        print("a triangulation of a genus",g,"closed orientable surface must have at least",4*g-2,"triangles")
        return None
    
    # create empty surface triangulation
    s = Triangulation2()
    
    # Build fundamental domain disk with 4g-2 triangles and boundary a 4g-gon
    #
    # add first triangle
    s.newSimplex()
    for i in range(4*g-3):
        # add next triangle
        s.newSimplex()
        # take last two triangles and...
        a = s.simplex(s.size()-1)
        b = s.simplex(s.size()-2)
        # glue them together (gluing face iterates, face 2 gets never glued)
        if i%2 == 0:
            a.join(0,b,Perm3())
        else:
            a.join(1,b,Perm3())
    
    # special case if we have a surface
    if g==0:
        s.newSimplex()
        a = s.simplex(0)
        b = s.simplex(1)
        a.join(2,b,Perm3())
        a.join(1,b,Perm3())
        a.join(0,b,Perm3())
    # special case if we have a torus
    elif g==1:
        a = s.simplex(0)
        b = s.simplex(1)
        a.join(2,b,Perm3(2,0,1))
        a.join(1,b,Perm3(1,2,0))
    # glue antipodal edges to each other to obtain genus g surface
    else:
        for k in range(2*g-2):
            a = s.simplex(k)
            b = s.simplex(k+2*g)
            a.join(2,b,Perm3(1,0,2))
        a = s.simplex(2*g-2)
        b = s.simplex(4*g-3)
        a.join(2,b,Perm3(2,0,1))        
        a = s.simplex(2*g-1)
        b = s.simplex(0)
        a.join(2,b,Perm3(2,0,1))   
        
    # add triangles as needed
    while s.size() < n:
        s.pachner(s.simplex(0),True,True)
    return s
#######################################################
